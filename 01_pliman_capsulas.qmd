---
title: "01: Diversidade genética em genótipos de linho (Linum usitatissimum, L.) cultivados em Florianópolis-SC."
---

```{r global_options, include = FALSE}
knitr::opts_chunk$set(cache = FALSE,
                      comment = "##",
                      collapse = TRUE,
                      warning = FALSE,
                      message = FALSE)

```


# Pacotes


```{r warning=FALSE, message=FALSE}
library(pliman)
library(tidyverse)
library(purrr)
library(rio)
set_wd_here("figs/capsulas")
img <- image_import("a1426e78-6bc2-4ce4-9d58-0777384c066d.jpg", resize = 50)
bin <- image_binary(img, index = "GRAY")[[1]]
fmed <- image_filter(bin, size = 3)
boa <- image_opening(fmed, size = 20)
image_combine(img, bin, fmed, boa, ncol = 2)


```

# Contagem manual
```{r}
pick_count(img)

```



# Analisar as fotos

# Processamento em lote (validação)


```{r}
res_val <- 
  analyze_objects(
    pattern = "-",
    resize = 50,
    dir_original = "figs/capsulas/",
    dir_processed = "figs/proc",
    index = "GRAY",
    marker = "point",
    marker_col = "red",
    # save_image = TRUE,
    opening = 15,
    filter = 3,
    parallel = TRUE,
    workers = 6
  )
export(res_val$count, "data/capsulas.xlsx")
export(res_val$results, "data/capsulas_raw.csv")
res_graos <- 
  analyze_objects(
    pattern = "-",
    resize = 50,
    dir_original = "figs/graos/",
    dir_processed = "figs/proc_graos",
    index = "GRAY",
    marker = "point",
    marker_col = "red",
    save_image = TRUE,
    marker_size = 1,
    show_contour = FALSE,
    opening = 7,
    parallel = TRUE,
    workers = 6
  )
export(res_graos$count, "data/graos.xlsx")
export(res_graos$results, "data/graos_raw.csv")
```



# Cenário 100%
```{r}
set_wd_here()

# CENÁRIO COM IMAGENS ORIGINAIS
cenarios <- expand_grid(open = c(0, 25),
                        filt = c(0, 5))
results_100 <- 
  map_dfr(1:4, function(i){
    tp <- 
      system.time(
        res <- 
          analyze_objects(
            pattern = "-",
            dir_original = "figs/R100/",
            index = "GRAY",
            opening = cenarios[[i, 1]],
            filter = cenarios[[i, 2]],
            plot = FALSE
          )
      )
    res$count |> 
      mutate(filter = cenarios[[i, 2]],
             opening = cenarios[[i, 1]],
             resolucao = "100",
             tempo = as.numeric(tp)[3])
    
  })



# 50% DA RESOLUÇÃO

cenarios <- expand_grid(open = c(0, 15),
                        filt = c(0, 3))

results_50 <- 
  map_dfr(1:4, function(i){
    tp <- 
      system.time(
        res <- 
          analyze_objects(
            pattern = "-",
            dir_original = "figs/R50/",
            index = "GRAY",
            opening = cenarios[[i, 1]],
            filter = cenarios[[i, 2]],
            plot = FALSE
          )
      )
    res$count |> 
      mutate(filter = cenarios[[i, 2]],
             opening = cenarios[[i, 1]],
             resolucao = "50",
             tempo = as.numeric(tp)[3])
    
  })

# 25% DA RESOLUÇÃO
cenarios <- expand_grid(open = c(0, 5),
                        filt = c(0, 2))

results_25 <- 
  map_dfr(1:4, function(i){
    tp <- 
      system.time(
        res <- 
          analyze_objects(
            pattern = "-",
            dir_original = "figs/R25/",
            index = "GRAY",
            opening = cenarios[[i, 1]],
            filter = cenarios[[i, 2]],
            plot = FALSE
          )
      )
    res$count |> 
      mutate(filter = cenarios[[i, 2]],
             opening = cenarios[[i, 1]],
             resolucao = "25",
             tempo = as.numeric(tp)[3])
    
  })

final <- bind_rows(results_100, results_50, results_25)
export(final, "dados_cenarios.xlsx")
```




# Concordância


$$
\rho_c = \frac{2 \cdot \text{Cov}(x, y)}{\text{Var}(x) + \text{Var}(y) + (\bar{x} - \bar{y})^2}

$$

A Concordância de Lin ou Coeficiente de Correlação de Concordância (CCC) é uma métrica que avalia simultaneamente a precisão e a acurácia entre duas variáveis contínuas. Ela é frequentemente utilizada para medir o grau de concordância entre dois métodos de mensuração ou entre observações pareadas.

Enquanto o coeficiente de correlação de Pearson r mede apenas a precisão (a força da associação linear), o CCC incorpora também a acurácia (quão próximo os dados estão da linha de identidade.


```{r}

df <- 
  import("data/acuracia_capsulas.xlsx") |> 
  metan::as_factor(filter:resolucao) %>% 
  mutate(filter = paste0("filter = ", filter),
         opening = paste0("opening = ", opening))

# Agora computa as métricas (vou computar elas depois de novo para colocar nos gráficos)
df |> 
  group_by(filter, opening, resolucao) %>%
  ccc(real, predito) %>%
  mutate(rho = paste0("rho[c]:~", round(ccc, 4)),
         rmse = paste0("RMSE:~", round(rmse, 4)),
         r = paste0("r:~~~", round(r, 4)))

```



# Gráficos
```{r}
# cria uma nova coluna em cada resolução contendo os valores
dfvalid <- 
  df |> 
  group_by(resolucao) %>% 
  nest() |> 
  mutate(ccc = map(data, function(x){
    x |> 
      group_by(filter, opening) %>%
      ccc_lin(real, predito) |> 
      mutate(
        ccc = paste0("rho[c]:~", round(ccc, 3)),
        rmse = paste0("RMSE:~", round(rmse, 3)),
        r = paste0("r:~~~", round(r, 3)))
    
  }))

# 100# 
ggplot(dfvalid$data[[1]], aes(predito, real)) +
  geom_point(alpha = 0.5, color = "darkgreen") +
  facet_grid(filter ~ opening) +
  geom_abline(intercept = 0, slope = 1, color = "red") +
  geom_text(aes(label=ccc),
            x = 5,
            y = 360,
            hjust = 0,
            size = 3,
            data = dfvalid$ccc[[1]],
            parse = TRUE) +
  geom_text(aes(label=rmse),
            x = 5,
            y = 340,
            hjust = 0,
            size = 3,
            data = dfvalid$ccc[[1]],
            parse = TRUE) +
  geom_text(aes(label=r),
            x = 5,
            y = 320,
            hjust = 0,
            size = 3,
            data = dfvalid$ccc[[1]],
            parse = TRUE) +
  theme_stata() +
  coord_equal() +
  xlim(0, 400) +
  ylim(0, 400) +
  theme(panel.grid.major.y  = element_blank()) +
  labs(x = "Valor predito",
       y = "Valor observado")

ggsave("figs/plot_acuracia_100.jpg",
       width = 6,
       height = 6)

## 50%
ggplot(dfvalid$data[[2]], aes(predito, real)) +
  geom_point(alpha = 0.5, color = "darkgreen") +
  geom_abline(intercept = 0, slope = 1, color = "red") +
  facet_grid(filter ~ opening) +
  geom_text(aes(label=ccc),
            x = 5,
            y = 360,
            hjust = 0,
            size = 3,
            data = dfvalid$ccc[[2]],
            parse = TRUE) +
  geom_text(aes(label=rmse),
            x = 5,
            y = 340,
            hjust = 0,
            size = 3,
            data = dfvalid$ccc[[2]],
            parse = TRUE) +
  geom_text(aes(label=r),
            x = 5,
            y = 320,
            hjust = 0,
            size = 3,
            data = dfvalid$ccc[[2]],
            parse = TRUE) +
  theme_stata() +
  coord_equal() +
  xlim(0, 400) +
  ylim(0, 400) +
  theme(panel.grid.major.y  = element_blank()) +
  labs(x = "Valor predito",
       y = "Valor observado")

ggsave("figs/plot_acuracia_50.jpg",
       width = 6,
       height = 6)

# 25%
ggplot(dfvalid$data[[3]], aes(predito, real)) +
  geom_point(alpha = 0.5, color = "darkgreen") +
  geom_abline(intercept = 0, slope = 1, color = "red") +
  facet_grid(filter ~ opening) +
  geom_text(aes(label=ccc),
            x = 5,
            y = 360,
            hjust = 0,
            size = 3,
            data = dfvalid$ccc[[3]],
            parse = TRUE) +
  geom_text(aes(label=rmse),
            x = 5,
            y = 340,
            hjust = 0,
            size = 3,
            data = dfvalid$ccc[[3]],
            parse = TRUE) +
  geom_text(aes(label=r),
            x = 5,
            y = 320,
            hjust = 0,
            size = 3,
            data = dfvalid$ccc[[3]],
            parse = TRUE) +
  theme_stata() +
  coord_equal() +
  xlim(0, 400) +
  ylim(0, 400) +
  theme(panel.grid.major.y  = element_blank()) +
  labs(x = "Valor predito",
       y = "Valor observado") 
ggsave("figs/plot_acuracia_25.jpg",
       width = 6,
       height = 6)

```

# Section info
```{r}
sessionInfo()
```

